@model Max.Models.UserProfile
@{
    ViewData["Title"] = "My Profile";
}

<div class="container mt-5">
    <div class="row">
        <div class="col-md-4">
            <div class="card">
                <div class="card-body text-center">
                    <div class="profile-image mb-4">
                        <img src="@(string.IsNullOrEmpty(Model.ProfileImage) ? "https://via.placeholder.com/150" : Model.ProfileImage)" 
                             alt="Profile Picture" 
                             class="rounded-circle"
                             style="width: 150px; height: 150px; object-fit: cover;">
                        <div class="mt-3">
                            <button class="btn btn-outline-primary btn-sm" onclick="document.getElementById('profileImageInput').click()">
                                <i class="fas fa-camera"></i> Change Photo
                            </button>
                            <input type="file" id="profileImageInput" style="display: none;" accept="image/*">
                        </div>
                    </div>
                    <h4 class="card-title">@Model.FirstName @Model.LastName</h4>
                    <p class="text-muted">@Model.Email</p>
                    <div class="d-grid gap-2">
                        <button class="btn btn-primary" onclick="toggleEditMode()">
                            <i class="fas fa-edit"></i> Edit Profile
                        </button>
                    </div>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Account Statistics</h5>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Total Bookings:</span>
                        <span class="badge bg-primary">@Model.TotalBookings</span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Member Since:</span>
                        <span>@Model.MemberSince.ToString("MMM yyyy")</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Profile Information</h5>
                    <form id="profileForm" onsubmit="saveProfile(event)">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">First Name</label>
                                <input type="text" class="form-control" id="firstName" value="@Model.FirstName" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Last Name</label>
                                <input type="text" class="form-control" id="lastName" value="@Model.LastName" readonly>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" value="@Model.Email" readonly>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Phone Number</label>
                            <input type="tel" class="form-control" id="phone" value="@Model.PhoneNumber" readonly>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Address</label>
                            <input type="text" class="form-control" id="address" value="@Model.Address" readonly>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">City</label>
                                <input type="text" class="form-control" id="city" value="@Model.City" readonly>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Country</label>
                                <input type="text" class="form-control" id="country" value="@Model.Country" readonly>
                            </div>
                        </div>

                        <div class="mb-3">
                            <label class="form-label">Bio</label>
                            <textarea class="form-control" id="bio" rows="3" readonly>@Model.Bio</textarea>
                        </div>

                        <div class="d-flex justify-content-end gap-2" id="editButtons" style="display: none;">
                            <button type="button" class="btn btn-secondary" onclick="cancelEdit()">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save Changes</button>
                        </div>
                    </form>
                </div>
            </div>

            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Recent Bookings</h5>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Booking ID</th>
                                    <th>Type</th>
                                    <th>Date</th>
                                    <th>Status</th>
                                    <th>Action</th>
                                </tr>
                            </thead>
                            <tbody id="recentBookings">
                                <!-- Bookings will be loaded here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .profile-image {
            position: relative;
            display: inline-block;
        }

        .profile-image img {
            border: 3px solid #fff;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .form-control:read-only {
            background-color: #f8f9fa;
        }

        .table th {
            font-weight: 600;
            color: #003580;
        }
    </style>
}

@section Scripts {
    <script>
        let isEditMode = false;
        const originalValues = {};

        function toggleEditMode() {
            isEditMode = !isEditMode;
            const inputs = document.querySelectorAll('#profileForm input, #profileForm textarea');
            const editButtons = document.getElementById('editButtons');

            inputs.forEach(input => {
                if (isEditMode) {
                    // Store original values
                    originalValues[input.id] = input.value;
                    input.readOnly = false;
                } else {
                    // Restore original values
                    input.value = originalValues[input.id];
                    input.readOnly = true;
                }
            });

            editButtons.style.display = isEditMode ? 'flex' : 'none';
        }

        function cancelEdit() {
            toggleEditMode();
        }

        async function saveProfile(event) {
            event.preventDefault();

            const profileData = {
                firstName: document.getElementById('firstName').value,
                lastName: document.getElementById('lastName').value,
                email: document.getElementById('email').value,
                phone: document.getElementById('phone').value,
                address: document.getElementById('address').value,
                city: document.getElementById('city').value,
                country: document.getElementById('country').value,
                bio: document.getElementById('bio').value
            };

            try {
                const response = await fetch('/api/profile/update', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(profileData)
                });

                if (response.ok) {
                    // Update original values
                    Object.keys(profileData).forEach(key => {
                        originalValues[key] = profileData[key];
                    });

                    toggleEditMode();
                    showAlert('Profile updated successfully!', 'success');
                } else {
                    throw new Error('Failed to update profile');
                }
            } catch (error) {
                showAlert('Failed to update profile. Please try again.', 'danger');
            }
        }

        function showAlert(message, type) {
            const alertDiv = document.createElement('div');
            alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
            alertDiv.innerHTML = `
                ${message}
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.container').insertAdjacentElement('afterbegin', alertDiv);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alertDiv.remove();
            }, 5000);
        }

        // Handle profile image upload
        document.getElementById('profileImageInput').addEventListener('change', async function(e) {
            const file = e.target.files[0];
            if (!file) return;

            const formData = new FormData();
            formData.append('profileImage', file);

            try {
                const response = await fetch('/api/profile/upload-image', {
                    method: 'POST',
                    body: formData
                });

                if (response.ok) {
                    const data = await response.json();
                    document.querySelector('.profile-image img').src = data.imageUrl;
                    showAlert('Profile picture updated successfully!', 'success');
                } else {
                    throw new Error('Failed to upload image');
                }
            } catch (error) {
                showAlert('Failed to upload profile picture. Please try again.', 'danger');
            }
        });

        // Load recent bookings
        async function loadRecentBookings() {
            try {
                const response = await fetch('/api/bookings/recent');
                const bookings = await response.json();

                const bookingsHtml = bookings.map(booking => `
                    <tr>
                        <td>#${booking.id}</td>
                        <td>${booking.type}</td>
                        <td>${new Date(booking.date).toLocaleDateString()}</td>
                        <td><span class="badge bg-${getStatusBadgeColor(booking.status)}">${booking.status}</span></td>
                        <td>
                            <button class="btn btn-sm btn-outline-primary" onclick="viewBooking(${booking.id})">
                                View Details
                            </button>
                        </td>
                    </tr>
                `).join('');

                document.getElementById('recentBookings').innerHTML = bookingsHtml;
            } catch (error) {
                console.error('Failed to load recent bookings:', error);
            }
        }

        function getStatusBadgeColor(status) {
            switch (status.toLowerCase()) {
                case 'confirmed': return 'success';
                case 'pending': return 'warning';
                case 'cancelled': return 'danger';
                default: return 'secondary';
            }
        }

        function viewBooking(bookingId) {
            // Implement booking details view
            window.location.href = `/bookings/${bookingId}`;
        }

        // Load recent bookings on page load
        loadRecentBookings();
    </script>
} 